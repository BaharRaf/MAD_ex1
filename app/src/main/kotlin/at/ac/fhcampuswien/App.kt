/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien
import java.util.Scanner
import kotlin.random.Random

class App {

    // Scanner for reading user input from the console.
    private val scanner = Scanner(System.`in`)

    /**
     * Initiates and controls the flow of the number guessing game.
     * @param digitsToGuess The number of digits the generated number should have, default is 4.
     */
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        // Generate a random number with the specified number of unique digits.

        //TODO: build a menu which calls the functions and works with the return values

        val generatedNumber = generateRandomNonRepeatingNumber(digitsToGuess)
        println("Welcome to the Number Guessing Game!")
        println("I've generated a number with $digitsToGuess unique digits. Try to guess it!")
        println("Enter your guess or type 'exit' to quit.")

        // Game loop continues until the user decides to exit.
        while (true) {
            print("Your guess: ")
            val guess = scanner.nextLine()

            // Check if the user wants to exit the game.
            if (guess.equals("exit", ignoreCase = true)) {
                println("Game over. The number was $generatedNumber. Thanks for playing!")
                break
            }

            try {
                val guessInt = guess.toInt()
                // Validate the length of the user's guess.
                if (guess.length != digitsToGuess) {
                    println("Your guess must have exactly $digitsToGuess digits. Please try again.")
                    continue
                }

                // Compare the user's guess with the generated number and provide feedback.
                val result = checkUserInputAgainstGeneratedNumber(guessInt, generatedNumber)
                if (result.m == digitsToGuess) {
                    println("Congratulations! You've guessed the number correctly: $generatedNumber")
                    break
                } else {
                    println("You've got ${result.n} correct digit(s), with ${result.m} in the correct position(s). Try again!")
                }
            } catch (e: NumberFormatException) {
                println("Invalid input. Please enter a numeric guess.")
            }
        }
    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        //TODO implement the function
        if (length !in 1..9) throw IllegalArgumentException("Length must be between 1 and 9.")
        // Generate a shuffled list of digits 1-9 and join them to form a number.
        val digits = (1..9).toList().shuffled().take(length).joinToString("").toInt()
        digits
    }


    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        //TODO implement the function
            val inputStr = input.toString()
            val generatedStr = generatedNumber.toString()

            // Ensure both numbers have the same length.
            if (inputStr.length != generatedStr.length) throw IllegalArgumentException("Input and generated number must have the same number of digits.")

            var n = 0 // Correct digits regardless of position
            var m = 0 // Correct digits in the correct position

            // Count occurrences of each digit in both the input and generated numbers.
            val generatedDigitsCount = generatedStr.groupingBy { it }.eachCount()
            val inputDigitsCount = inputStr.groupingBy { it }.eachCount()

            inputStr.forEachIndexed { index, c ->
                if (c == generatedStr[index]) {
                    // Increment both counters if the digit is in the correct position.
                    m++
                    n++
                } else if (generatedStr.contains(c)) {
                    // Only count as a correct digit (n) if the number of occurrences in the input is less than or equal to that in the generated number
                    // This prevents counting extra occurrences of the same digit in the input
                    if (inputDigitsCount[c] ?: 0 <= generatedDigitsCount[c] ?: 0) {
                        // Increment n if the digit is correct but in the wrong position, without counting duplicates.
                        n++
                    }
                }
            }

            CompareResult(n, m)
        }
}

fun main() {
    println("Hello World!")
    // TODO: call the App.playNumberGame function with and without default arguments
    val app = App()
    app.playNumberGame() // Play the game with default digits
    // app.playNumberGame(5) // Uncomment to play with a different number of digits
}

